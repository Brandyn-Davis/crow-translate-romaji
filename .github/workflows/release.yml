name: Release
on:
  release:
    types: [created]
jobs:
  Release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-latest]
        arch: [amd64, aarch64, armv7]
        include:
          - os: ubuntu-18.04
            extra-cmake-arguments : >-
              -D CPACK_GENERATOR="DEB;RPM"
            upload-files: 'build/*.deb;build/*.rpm'
          - os: windows-latest
            extra-cmake-arguments : >-
              -D WITH_PORTABLE_MODE=ON
              -D CPACK_GENERATOR="NSIS;7Z"
              -D VCPKG_TARGET_TRIPLET=$env:RUNVCPKG_VCPKG_TRIPLET
              -D CMAKE_TOOLCHAIN_FILE=$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake
            upload-files: 'build/*.exe;build/*.7z'
        exclude:
          - os: windows-latest
            arch: aarch64
          - os: windows-latest
            arch: armv7
    steps:
    - name: Clone repo
      uses: actions/checkout@v2.3.4

    - name: Install apt packages
      if: runner.os == 'Linux' && matrix.arch == 'amd64'
      run: |
        sudo apt-get update
        sudo apt-get install extra-cmake-modules libqt5x11extras5-dev qttools5-dev qtmultimedia5-dev libtesseract-dev rpm

    # To set the application icon
    - name: Install icoutils
      if: runner.os == 'Windows'
      run: |
        $version = "0.32.3"
        $client = new-object System.Net.WebClient
        $client.DownloadFile("https://sourceforge.net/projects/unix-utils/files/icoutils/icoutils-$version-x86_64.zip/download", "icoutils.zip")
        7z x icoutils.zip
        echo "${{ github.workspace }}/icoutils-$version-x86_64/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Install vcpkg packages
      uses: lukka/run-vcpkg@v6.1
      if: runner.os == 'Windows'
      with:
        vcpkgArguments: tesseract[cpu-independed] ecm qt5-base qt5-svg qt5-multimedia qt5-winextras qt5-tools qt5-translations --triplet x64-windows
        vcpkgGitCommitId: 066c6fd712a3b7015388de644e44faf9774f3641
      env:
        VCPKG_DISABLE_METRICS: 1

    - name: Build
      if: matrix.arch == 'amd64'
      run: |
        cmake -B build -D CMAKE_BUILD_TYPE=Release ${{ matrix.extra-cmake-arguments }}
        cmake --build build --target package --parallel 2 --config Release

    - name: Build in docker
      uses: uraimo/run-on-arch-action@v2.0.9
      if: runner.os == 'Linux' && matrix.arch != 'amd64'
      with:
        arch: ${{ matrix.arch }}
        distro: ubuntu18.04
        githubToken: ${{ github.token }}
        dockerRunArgs: --volume "${PWD}:/repo"
        install: |
          apt-get update -y
          apt-get install -y wget git g++ dpkg-dev libxcb1-dev extra-cmake-modules libqt5x11extras5-dev qttools5-dev qtmultimedia5-dev libtesseract-dev rpm
          wget https://github.com/Kitware/CMake/releases/download/v3.15.0/cmake-3.15.0.tar.gz
          tar -zxvf cmake-3.15.0.tar.gz
          cd cmake-3.15.0
          ./bootstrap
          make install
        run: |
          cmake -S /repo -B /repo/build -D CMAKE_BUILD_TYPE=Release ${{ matrix.extra-cmake-arguments }}
          cmake --build /repo/build --target package --parallel 2

    - name: Upload
      uses: AButler/upload-release-assets@v2.0
      with:
        files: ${{ matrix.upload-files }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
